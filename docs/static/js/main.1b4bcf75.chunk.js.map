{"version":3,"sources":["PathFindingVisualiser/OptionsPanelPFV.js","PathFindingVisualiser/GridPanel.js","PathFindingVisualiser/PathFindingVisualiser.js","App.js","reportWebVitals.js","index.js"],"names":["isStarted","OptionsPanel","props","className","onChange","event","SetNodeType","Number","parseInt","target","value","type","name","defaultChecked","SetSortAlg","ReturnSortAlg","SetSortSpeed","ReturnSpeed","min","max","MIN_VALUE","step","onClick","StartPathFinding","mousePos","middleMouse","leftMouse","rightMouse","changedTiles","document","addEventListener","preventDefault","GridPanel","useState","offsetX","SetOffsetX","offsetY","SetOffsetY","handleEvent","undefined","screenX","screenY","button","body","style","cursor","SetStarted","ij","id","split","i","j","nodeType","JSON","stringify","walls","includes","startPoint","SetEndPoint","endPoint","SetStartPoint","tempWalls","filter","item","push","uniqueWalls","Array","from","Set","SetWalls","tempMousePos","Square","colour","background","marginTop","marginLeft","onMouseUp","onMouseDown","onMouseMove","squares","currentPoint","currentPath","currentCheck","SpawnSquares","tempCurrentCheck","points","PathFindingVisualiser","sortAlg","SetCurrentCheck","SetCurrentPath","currentSortSpeed","SetCurrentSortSpeed","useEffect","title","ResetPathFinding","DijkstraInitialisePoints","Infinity","DijkstraCheckNeighbours","point","a","pointsToUpdate","pointsToCheck","length","DijkstraUpdatePointDistanceAndPrev","Promise","resolve","setTimeout","DijkstraUpdateVisited","DijkstraReturnDistanceTo","prevPoint","distanceTo","pointsInput","distance","currentShortestDistance","newShortestDistance","newPreviousNode","DijkstraReturnCurrentShortest","currentShortestDistanceOverall","visited","DijkstraAlgorithm","returnVal","pointInPath","pathInOrder","unshift","val","sortSpeed","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b4bcf75.chunk.js","sourcesContent":["import React from 'react';\r\nimport './OptionsPanelPFV.css';\r\n\r\nvar isStarted = false;\r\n\r\nconst OptionsPanel = (props) => { \r\n\r\n    const StartPathFinding = () => {\r\n        isStarted = !props.isStarted;\r\n        props.StartPathFinding(isStarted);\r\n    }\r\n\r\n    const ReturnNodeType = (event) => {\r\n        props.SetNodeType(Number.parseInt(event.target.value));\r\n    }\r\n\r\n    const ReturnSortAlg = (event) => {\r\n        props.SetSortAlg(event.target.value);\r\n    }\r\n\r\n    const ReturnSpeed = (event) => {\r\n        props.SetSortSpeed(event.target.value);\r\n    }\r\n\r\n    return(\r\n        <div className=\"OptionsPanel\">\r\n            <h1>PATH FINDING VISUALISER</h1>\r\n            <h3>Node Type\r\n                <br/>\r\n                <div onChange={ReturnNodeType}>\r\n                    <input className=\"ntInput\" type=\"radio\" value=\"0\" name=\"nodeType\" defaultChecked/>Start Node<span className=\"\"></span>\r\n                    <input className=\"ntInput\" type=\"radio\" value=\"1\" name=\"nodeType\"/>End Node\r\n                </div>\r\n            </h3>\r\n            <br/>\r\n            <h3>Path Finding Algorithm\r\n                <br/>\r\n                <select onChange={event => {ReturnSortAlg(event)}}>\r\n                    <option value=\"0\">Dijkstra's Algorithm</option>\r\n                    <option value=\"1\">A* Algorithm</option>\r\n                </select>    \r\n            </h3>\r\n            <br/>\r\n            <h3>Path Finding Speed\r\n                <br/>\r\n                <input onChange={event => {ReturnSpeed(event)}} className=\"slider\" type=\"range\" min=\"0\" max={0.5 - Number.MIN_VALUE} step=\"0.001\"/>\r\n            </h3>\r\n            <br/>\r\n            <button onClick={StartPathFinding}>{props.isStarted ? \"Reset\" : \"Start\"}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OptionsPanel;","import React, {useState} from 'react';\r\nimport './GridPanel.css';\r\n\r\nconst initialOffsetY = -95 / 2;\r\nconst initialOffsetX = -70 / 1.5;\r\n\r\nvar mousePos = [0, 0];\r\nvar middleMouse = false;\r\nvar leftMouse = false;\r\nvar rightMouse = false;\r\n\r\nvar changedTiles = [];\r\n\r\ndocument.addEventListener(\"contextmenu\", (event) => {\r\n    event.preventDefault();\r\n});\r\n\r\nfunction GridPanel(props) {\r\n    const [offsetX, SetOffsetX] = useState(1);\r\n    const [offsetY, SetOffsetY] = useState(1);\r\n\r\n    const handleEvent = (event) => {\r\n        if (event !== undefined) {\r\n            event.preventDefault();\r\n            if (event.type === \"mousedown\") {\r\n                mousePos = [event.screenX, event.screenY];\r\n                leftMouse = (event.button === 0);\r\n                middleMouse = (event.button === 1);\r\n                rightMouse = (event.button === 2);\r\n                if (middleMouse) {\r\n                    document.body.style.cursor = \"all-scroll\";\r\n                }\r\n                if (leftMouse) {\r\n                    props.SetStarted(false);\r\n                    document.body.style.cursor = \"crosshair\";\r\n                    var ij = event.target.id;\r\n                    if (ij !== \"\") {\r\n                        ij = ij.split(\" \");\r\n                        var i = Number.parseInt(ij[0]);\r\n                        var j = Number.parseInt(ij[1]);\r\n                        if (props.nodeType > 0) {\r\n                            if (!JSON.stringify(props.walls).includes(JSON.stringify([i, j])) && JSON.stringify(props.startPoint) !== JSON.stringify([i, j])) {\r\n                                props.SetEndPoint([i, j]);\r\n                            }\r\n                        } else {\r\n                            if (!JSON.stringify(props.walls).includes(JSON.stringify([i, j])) && JSON.stringify(props.endPoint) !== JSON.stringify([i, j])) {\r\n                                props.SetStartPoint([i, j]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (rightMouse) {\r\n                    props.SetStarted(false);\r\n                    var ij = event.target.id;\r\n                    if (ij !== \"\") {\r\n                        ij = ij.split(\" \");\r\n                        var i = Number.parseInt(ij[0]);\r\n                        var j = Number.parseInt(ij[1]);\r\n                        var tempWalls = props.walls;\r\n                        if (JSON.stringify(props.startPoint) !== JSON.stringify([i, j]) && JSON.stringify(props.endPoint) !== JSON.stringify([i, j]) && !JSON.stringify(changedTiles).includes(JSON.stringify([i, j]))) {\r\n                            if (JSON.stringify(tempWalls).includes(JSON.stringify([i, j]))){\r\n                                tempWalls = tempWalls.filter(item => JSON.stringify(item) !== JSON.stringify([i, j]));\r\n                            } else {\r\n                                tempWalls.push([i, j]);\r\n                            }\r\n                            changedTiles.push([i, j]);\r\n                            const uniqueWalls = Array.from(new Set(tempWalls));\r\n                            props.SetWalls(uniqueWalls);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (event.type === \"mousemove\" && middleMouse) {\r\n                const tempMousePos = [event.screenX, event.screenY];\r\n\r\n                SetOffsetX(offsetX + ((tempMousePos[0] - mousePos[0])) / 7);\r\n                SetOffsetY(offsetY + ((tempMousePos[1] - mousePos[1])) / 7);\r\n        \r\n                mousePos = [event.screenX, event.screenY];\r\n            }\r\n\r\n            if (event.type === \"mousemove\" && rightMouse) {\r\n                var ij = event.target.id;\r\n                if (ij !== \"\") {\r\n                    ij = ij.split(\" \");\r\n                    var i = Number.parseInt(ij[0]);\r\n                    var j = Number.parseInt(ij[1]);\r\n                    var tempWalls = props.walls;\r\n                    if (JSON.stringify(props.startPoint) !== JSON.stringify([i, j]) && JSON.stringify(props.endPoint) !== JSON.stringify([i, j]) && !JSON.stringify(changedTiles).includes(JSON.stringify([i, j]))) {\r\n                        if (JSON.stringify(tempWalls).includes(JSON.stringify([i, j]))){\r\n                            tempWalls = tempWalls.filter(item => JSON.stringify(item) !== JSON.stringify([i, j]));\r\n                        } else {\r\n                            tempWalls.push([i, j]);\r\n                        }\r\n                        changedTiles.push([i, j]);\r\n                        const uniqueWalls = Array.from(new Set(tempWalls));\r\n                        props.SetWalls(uniqueWalls);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (event.type === \"mouseup\") {\r\n                changedTiles = [];\r\n                middleMouse = false;\r\n                leftMouse = false;\r\n                rightMouse = false;\r\n                document.body.style.cursor = \"default\";\r\n            }\r\n        }\r\n    };\r\n\r\n    const SpawnSquares = () => {\r\n        var squares = [];\r\n        for (var i = 0; i < 40; i++) {\r\n            for (var j = 0; j < 20; j++) {\r\n                var currentPoint = [i, j];\r\n                if (JSON.stringify(currentPoint) === JSON.stringify(props.startPoint)){\r\n                    squares.push(Square('#ea5455', i, j));\r\n                } else if (JSON.stringify(currentPoint) === JSON.stringify(props.endPoint)) {\r\n                    squares.push(Square('#ec7676', i, j));\r\n                } else if (JSON.stringify(props.currentPath).includes(JSON.stringify(currentPoint))) {\r\n                    squares.push(Square('#e8e8e8', i, j));\r\n                } else if (JSON.stringify(props.currentCheck).includes(JSON.stringify(currentPoint))) {\r\n                    squares.push(Square('#f07b3f', i, j));\r\n                } else if (JSON.stringify(props.walls).includes(JSON.stringify(currentPoint))) {\r\n                    squares.push(Square('#7b7b7b', i, j));\r\n                } else {\r\n                    squares.push(Square('#0b0c10', i, j));\r\n                }\r\n            }\r\n        }\r\n        return (squares);\r\n    }\r\n\r\n    const Square = (colour, i, j) => {\r\n        return (<div id={i + \" \" + j} style={{background: colour, marginTop: 93 / 2 + initialOffsetY + offsetY + (j * 5) + 'vh', marginLeft: 70 / 1.55 + initialOffsetX + offsetX + (i * 5) + 'vh'}} className=\"Square\" onClick={handleEvent} onMouseUp={handleEvent}></div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"GridPanel\" onMouseDown={handleEvent} onMouseMove={handleEvent} onMouseUp={handleEvent}>\r\n            {SpawnSquares()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GridPanel;","import React, {useEffect, useState} from 'react';\r\nimport OptionsPanel from './OptionsPanelPFV';\r\nimport GridPanel from './GridPanel';\r\nimport './PathFindingVisualiser.css';\r\n\r\nvar isStarted = false;\r\nvar tempCurrentCheck = [[-1, -1]];\r\nvar points = {};\r\n\r\nfunction PathFindingVisualiser() {\r\n    const [nodeType, SetNodeType] = useState(0);\r\n    const [startPoint, SetStartPoint] = useState([10, 5]);\r\n    const [endPoint, SetEndPoint] = useState([11, 6]);\r\n    const [walls, SetWalls] = useState([]);\r\n    const [sortAlg, SetSortAlg] = useState(\"0\");\r\n    const [currentCheck, SetCurrentCheck] = useState([[-1, -1]]);\r\n    const [currentPath, SetCurrentPath] = useState([[-1, -1]]);\r\n    const [currentSortSpeed, SetCurrentSortSpeed] = useState(0.0);\r\n\r\n    useEffect(() => {\r\n      document.title = \"Path Finding Visualiser\"\r\n    }, []);\r\n\r\n    const SetSortSpeed = (sortSpeed) => {\r\n        SetCurrentSortSpeed(0.5 - parseInt(sortSpeed));\r\n    }\r\n\r\n    const Pause = () => { \r\n        return new Promise(resolve => { \r\n            setTimeout(function() { \r\n            resolve(); \r\n            }, currentSortSpeed); \r\n        }); \r\n    };\r\n\r\n    const ResetPathFinding = () => {\r\n        SetCurrentPath([]);\r\n        SetCurrentCheck([]);\r\n        tempCurrentCheck = [[-1, -1]];\r\n        points = {};\r\n    }\r\n\r\n    const SetStarted = (i) => {\r\n        if (!isStarted && !i) {\r\n            isStarted = i;\r\n            ResetPathFinding();\r\n        } else {\r\n            isStarted = i;\r\n        }\r\n    }\r\n\r\n    const StartPathFinding = (val) => {\r\n        SetStarted(val);\r\n        if (isStarted) {\r\n            if (sortAlg === \"0\") {\r\n                DijkstraAlgorithm();\r\n            }\r\n        }\r\n    }\r\n\r\n    const DijkstraInitialisePoints = () => {\r\n        points = {};\r\n        for (var i = 0; i < 40; i++) {\r\n            for (var j = 0; j < 20; j++) {\r\n                if (JSON.stringify([i, j]) === JSON.stringify(startPoint)) {\r\n                    points[i + \" \" + j] = [false, 0, null];\r\n                } else {\r\n                    points[i + \" \" + j] = [false, Infinity, null];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const DijkstraCheckNeighbours = async (point) => {\r\n        if (JSON.stringify(point) === JSON.stringify([-1,-1])) {\r\n            return -1;\r\n        }\r\n        var pointsToUpdate = [];\r\n        var pointsToCheck = [[point[0] - 1, point[1]], [point[0] + 1, point[1]], [point[0], point[1] - 1], [point[0], point[1] + 1]];\r\n        for (var i = 0; i < pointsToCheck.length; i++) {\r\n            if (JSON.stringify(pointsToCheck[i]) === JSON.stringify(endPoint)) {\r\n                DijkstraUpdatePointDistanceAndPrev([pointsToCheck[i]], point);\r\n                return 1;\r\n            }\r\n            if (pointsToCheck[i][0]  >= 0 && pointsToCheck[i][0] < 40 && pointsToCheck[i][1]  >= 0 && pointsToCheck[i][1] < 20 && !JSON.stringify(walls).includes(JSON.stringify(pointsToCheck[i])) && JSON.stringify(startPoint) !== (JSON.stringify(pointsToCheck[i])) && points[pointsToCheck[i][0] + \" \" + pointsToCheck[i][1]][0] !== true) {\r\n                pointsToUpdate.push(pointsToCheck[i]);\r\n                tempCurrentCheck.push([pointsToCheck[i][0],pointsToCheck[i][1]]);\r\n            }\r\n        }\r\n        SetCurrentCheck(Array.from(new Set(tempCurrentCheck)));\r\n        await Pause();\r\n        DijkstraUpdatePointDistanceAndPrev(pointsToUpdate, point);\r\n        DijkstraUpdateVisited(point);\r\n        return 0;\r\n    }\r\n\r\n    const DijkstraUpdateVisited = (point) => {\r\n        points[point[0] + \" \" + point[1]][0] = true;\r\n    }\r\n\r\n    const DijkstraReturnDistanceTo = (point) => {\r\n        var prevPoint = points[point[0] + \" \" + point[1]][2];\r\n        var distanceTo = points[point[0] + \" \" + point[1]][1];\r\n        while (prevPoint !== null) {\r\n            distanceTo += points[prevPoint[0] + \" \" + prevPoint[1]][1];\r\n            prevPoint = points[prevPoint[0] + \" \" + prevPoint[1]][2];\r\n        }\r\n        return distanceTo;\r\n    }\r\n\r\n    const DijkstraUpdatePointDistanceAndPrev =  (pointsInput, prevPoint) => {\r\n        for (var i = 0; i < pointsInput.length; i++){\r\n            var point = pointsInput[i];\r\n            var distance = 1 + DijkstraReturnDistanceTo(prevPoint);\r\n            var currentShortestDistance = points[point[0] + \" \" + point[1]][1];\r\n            var currentPreviousNode = points[point[0] + \" \" + point[1]][2];\r\n            var newShortestDistance = currentShortestDistance;\r\n            var newPreviousNode = currentPreviousNode;\r\n            if (distance < currentShortestDistance) {\r\n                newShortestDistance = distance;\r\n                newPreviousNode = prevPoint;\r\n            }\r\n            points[point[0] + \" \" + point[1]][1] = newShortestDistance;\r\n            points[point[0] + \" \" + point[1]][2] = newPreviousNode;\r\n        }\r\n    }\r\n\r\n    const DijkstraReturnCurrentShortest = () => {\r\n        var point = [-1,-1];\r\n        var currentShortestDistanceOverall = Infinity;\r\n        for (var i = 0; i < 40; i++) {\r\n            for (var j = 0; j < 20; j++) {\r\n                var distance = points[i + \" \" + j][1];\r\n                var visited = points[i + \" \" + j][0];\r\n                if (distance < currentShortestDistanceOverall && !visited){\r\n                    currentShortestDistanceOverall = distance;\r\n                    point = [i, j];\r\n                }\r\n            }\r\n        }\r\n        return (point);\r\n    }\r\n\r\n    const DijkstraAlgorithm = async () => {\r\n        if (isStarted) {\r\n            ResetPathFinding();\r\n            DijkstraInitialisePoints();\r\n            var returnVal = await DijkstraCheckNeighbours(startPoint);\r\n            var point = [-1,-1];\r\n            while (returnVal === 0) {\r\n                point = DijkstraReturnCurrentShortest();\r\n                returnVal = await DijkstraCheckNeighbours(point);\r\n                if (!isStarted) {\r\n                    returnVal = -1;\r\n                }\r\n            }\r\n            SetStarted(false);\r\n            if (returnVal === 1) {\r\n                var pointInPath = endPoint;\r\n                var pathInOrder = [];\r\n                while (pointInPath !== startPoint) {\r\n                    pathInOrder.unshift(pointInPath);\r\n                    pointInPath = points[pointInPath[0] + \" \" + pointInPath[1]][2];\r\n                }\r\n                pathInOrder.unshift(startPoint);\r\n                SetCurrentPath(pathInOrder);\r\n            } else {\r\n                ResetPathFinding();\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"PathFindingVisualiser\">\r\n            <OptionsPanel isStarted={isStarted} SetStarted={SetStarted} SetSortAlg={SetSortAlg} StartPathFinding={StartPathFinding} SetNodeType={SetNodeType} SetSortSpeed={SetSortSpeed}></OptionsPanel>\r\n            <GridPanel currentPath={currentPath} SetStarted={SetStarted} currentCheck={currentCheck} nodeType={nodeType} SetStartPoint={SetStartPoint} startPoint={startPoint} SetEndPoint={SetEndPoint} endPoint={endPoint} SetWalls={SetWalls} walls={walls}></GridPanel>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PathFindingVisualiser;","import PathFindingVisualiser from './PathFindingVisualiser/PathFindingVisualiser'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"navBar\">\n      </div>\n      <PathFindingVisualiser/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}