[{"C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\App.js":"1","C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\PathFindingVisualiser\\GridPanel.js":"2","C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\PathFindingVisualiser\\OptionsPanelPFV.js":"3","C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\PathFindingVisualiser\\PathFindingVisualiser.js":"4","C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\index.js":"5"},{"size":255,"mtime":1606343913714,"results":"6","hashOfConfig":"7"},{"size":6706,"mtime":1606345699759,"results":"8","hashOfConfig":"7"},{"size":1790,"mtime":1606759108671,"results":"9","hashOfConfig":"7"},{"size":7099,"mtime":1606759474332,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kb8dsg",{"filePath":"14","messages":"15","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\App.js",[],"C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\PathFindingVisualiser\\GridPanel.js",["23","24","25","26","27","28","29"],"import React, {useState} from 'react';\r\nimport './GridPanel.css';\r\n\r\nconst initialOffsetY = -95 / 2;\r\nconst initialOffsetX = -70 / 1.5;\r\n\r\nvar mousePos = [0, 0];\r\nvar middleMouse = false;\r\nvar leftMouse = false;\r\nvar rightMouse = false;\r\n\r\nvar changedTiles = [];\r\n\r\ndocument.addEventListener(\"contextmenu\", (event) => {\r\n    event.preventDefault();\r\n});\r\n\r\nfunction GridPanel(props) {\r\n    const [offsetX, SetOffsetX] = useState(1);\r\n    const [offsetY, SetOffsetY] = useState(1);\r\n\r\n    const handleEvent = (event) => {\r\n        if (event !== undefined) {\r\n            event.preventDefault();\r\n            if (event.type === \"mousedown\") {\r\n                mousePos = [event.screenX, event.screenY];\r\n                leftMouse = (event.button === 0);\r\n                middleMouse = (event.button === 1);\r\n                rightMouse = (event.button === 2);\r\n                if (middleMouse) {\r\n                    document.body.style.cursor = \"all-scroll\";\r\n                }\r\n                if (leftMouse) {\r\n                    props.SetStarted(false);\r\n                    document.body.style.cursor = \"crosshair\";\r\n                    var ij = event.target.id;\r\n                    if (ij !== \"\") {\r\n                        ij = ij.split(\" \");\r\n                        var i = Number.parseInt(ij[0]);\r\n                        var j = Number.parseInt(ij[1]);\r\n                        if (props.nodeType > 0) {\r\n                            if (!JSON.stringify(props.walls).includes(JSON.stringify([i, j])) && JSON.stringify(props.startPoint) !== JSON.stringify([i, j])) {\r\n                                props.SetEndPoint([i, j]);\r\n                            }\r\n                        } else {\r\n                            if (!JSON.stringify(props.walls).includes(JSON.stringify([i, j])) && JSON.stringify(props.endPoint) !== JSON.stringify([i, j])) {\r\n                                props.SetStartPoint([i, j]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (rightMouse) {\r\n                    props.SetStarted(false);\r\n                    var ij = event.target.id;\r\n                    if (ij !== \"\") {\r\n                        ij = ij.split(\" \");\r\n                        var i = Number.parseInt(ij[0]);\r\n                        var j = Number.parseInt(ij[1]);\r\n                        var tempWalls = props.walls;\r\n                        if (JSON.stringify(props.startPoint) !== JSON.stringify([i, j]) && JSON.stringify(props.endPoint) !== JSON.stringify([i, j]) && !JSON.stringify(changedTiles).includes(JSON.stringify([i, j]))) {\r\n                            if (JSON.stringify(tempWalls).includes(JSON.stringify([i, j]))){\r\n                                tempWalls = tempWalls.filter(item => JSON.stringify(item) !== JSON.stringify([i, j]));\r\n                            } else {\r\n                                tempWalls.push([i, j]);\r\n                            }\r\n                            changedTiles.push([i, j]);\r\n                            const uniqueWalls = Array.from(new Set(tempWalls));\r\n                            props.SetWalls(uniqueWalls);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (event.type === \"mousemove\" && middleMouse) {\r\n                const tempMousePos = [event.screenX, event.screenY];\r\n\r\n                SetOffsetX(offsetX + ((tempMousePos[0] - mousePos[0])) / 7);\r\n                SetOffsetY(offsetY + ((tempMousePos[1] - mousePos[1])) / 7);\r\n        \r\n                mousePos = [event.screenX, event.screenY];\r\n            }\r\n\r\n            if (event.type === \"mousemove\" && rightMouse) {\r\n                var ij = event.target.id;\r\n                if (ij !== \"\") {\r\n                    ij = ij.split(\" \");\r\n                    var i = Number.parseInt(ij[0]);\r\n                    var j = Number.parseInt(ij[1]);\r\n                    var tempWalls = props.walls;\r\n                    if (JSON.stringify(props.startPoint) !== JSON.stringify([i, j]) && JSON.stringify(props.endPoint) !== JSON.stringify([i, j]) && !JSON.stringify(changedTiles).includes(JSON.stringify([i, j]))) {\r\n                        if (JSON.stringify(tempWalls).includes(JSON.stringify([i, j]))){\r\n                            tempWalls = tempWalls.filter(item => JSON.stringify(item) !== JSON.stringify([i, j]));\r\n                        } else {\r\n                            tempWalls.push([i, j]);\r\n                        }\r\n                        changedTiles.push([i, j]);\r\n                        const uniqueWalls = Array.from(new Set(tempWalls));\r\n                        props.SetWalls(uniqueWalls);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (event.type === \"mouseup\") {\r\n                changedTiles = [];\r\n                middleMouse = false;\r\n                leftMouse = false;\r\n                rightMouse = false;\r\n                document.body.style.cursor = \"default\";\r\n            }\r\n        }\r\n    };\r\n\r\n    const SpawnSquares = () => {\r\n        var squares = [];\r\n        for (var i = 0; i < 40; i++) {\r\n            for (var j = 0; j < 20; j++) {\r\n                var currentPoint = [i, j];\r\n                if (JSON.stringify(currentPoint) === JSON.stringify(props.startPoint)){\r\n                    squares.push(Square('#66fcf1', i, j));\r\n                } else if (JSON.stringify(currentPoint) === JSON.stringify(props.endPoint)) {\r\n                    squares.push(Square('#45a29e', i, j));\r\n                } else if (JSON.stringify(props.currentPath).includes(JSON.stringify(currentPoint))) {\r\n                    squares.push(Square('#62AB37', i, j));\r\n                } else if (JSON.stringify(props.currentCheck).includes(JSON.stringify(currentPoint))) {\r\n                    squares.push(Square('#E03616', i, j));\r\n                } else if (JSON.stringify(props.walls).includes(JSON.stringify(currentPoint))) {\r\n                    squares.push(Square('#c5c6c7', i, j));\r\n                } else {\r\n                    squares.push(Square('#0b0c10', i, j));\r\n                }\r\n            }\r\n        }\r\n        return (squares);\r\n    }\r\n\r\n    const Square = (colour, i, j) => {\r\n        return (<div id={i + \" \" + j} style={{background: colour, marginTop: 93 / 2 + initialOffsetY + offsetY + (j * 5) + 'vh', marginLeft: 70 / 1.55 + initialOffsetX + offsetX + (i * 5) + 'vh'}} className=\"Square\" onClick={handleEvent} onMouseUp={handleEvent}></div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"GridPanel\" onMouseDown={handleEvent} onMouseMove={handleEvent} onMouseUp={handleEvent}>\r\n            {SpawnSquares()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GridPanel;","C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\PathFindingVisualiser\\OptionsPanelPFV.js",[],"C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\PathFindingVisualiser\\PathFindingVisualiser.js",[],"C:\\Users\\kreat\\Documents\\GitHub\\PathFindingVisualiser-ReactJS\\app\\src\\index.js",[],{"ruleId":"30","severity":1,"message":"31","line":54,"column":25,"nodeType":"32","messageId":"33","endLine":54,"endColumn":27},{"ruleId":"30","severity":1,"message":"34","line":57,"column":29,"nodeType":"32","messageId":"33","endLine":57,"endColumn":30},{"ruleId":"30","severity":1,"message":"35","line":58,"column":29,"nodeType":"32","messageId":"33","endLine":58,"endColumn":30},{"ruleId":"30","severity":1,"message":"31","line":84,"column":21,"nodeType":"32","messageId":"33","endLine":84,"endColumn":23},{"ruleId":"30","severity":1,"message":"34","line":87,"column":25,"nodeType":"32","messageId":"33","endLine":87,"endColumn":26},{"ruleId":"30","severity":1,"message":"35","line":88,"column":25,"nodeType":"32","messageId":"33","endLine":88,"endColumn":26},{"ruleId":"30","severity":1,"message":"36","line":89,"column":25,"nodeType":"32","messageId":"33","endLine":89,"endColumn":34},"no-redeclare","'ij' is already defined.","Identifier","redeclared","'i' is already defined.","'j' is already defined.","'tempWalls' is already defined."]